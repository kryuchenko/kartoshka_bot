name: CI¬†&¬†Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# –Ω—É–∂–Ω–æ –¥–ª—è –ø—É—à–∞ –±–µ–π–¥–∂–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ PR
permissions:
  contents: write
  pull-requests: write

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    # 1. –ö–ª–æ–Ω–∏—Ä—É–µ–º –∫–æ–¥
    - uses: actions/checkout@v4

    # 2. –°—Ç–∞–≤–∏–º Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    # 3. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-asyncio pytest-cov

    # 4. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã —Ç–µ—Å—Ç–∞–º
    - name: Prepare runtime env vars
      run: |
        echo "BOT_TOKEN=123456789:TEST_TOKEN_FOR_TESTING" >> $GITHUB_ENV
        echo "EDITOR_IDS=123,456,789" >> $GITHUB_ENV
        echo "PUBLISH_CHAT_ID=-1001234567890" >> $GITHUB_ENV
        echo "BOT_NAME=TestBot" >> $GITHUB_ENV
        echo "POST_FREQUENCY_MINUTES=60" >> $GITHUB_ENV
        echo "CRYPTOSELECTARCHY=true" >> $GITHUB_ENV
        echo "VOTES_TO_APPROVE=3" >> $GITHUB_ENV
        echo "VOTES_TO_REJECT=3" >> $GITHUB_ENV

    # 5. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    - name: Run tests with coverage
      run: |
        pytest -v \
          --cov=kartoshka_bot \
          --cov-report=term-missing:skip-covered \
          --cov-report=xml \
          --cov-report=html
        
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –∏ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - name: Verify rejection tracking and ban functionality
      run: |
        echo "‚û°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        if pytest -v tests/test_user_rejection.py::TestUserRejectionTracking::test_multiple_rejections_counting; then
          echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –∏ –±–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
          echo "   - –°—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –º–µ–º–∞"
          echo "   - –°—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –º–µ–º–∞"
          echo "   - –ë–∞–Ω —Å–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –º–µ–º–∞"
        else
          echo "‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –∏ –±–∞–Ω–∞"
          echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ/—Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π"
          echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞"
          exit 1
        fi

    # 7. –ó–∞–≥—Ä—É–∂–∞–µ–º HTML‚Äë–æ—Ç—á—ë—Ç –∫–∞–∫ artefact
    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html
        path: htmlcov/

    # 8. –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º coverage.svg
    - name: Create coverage.svg badge
      id: badge
      uses: tj-actions/coverage-badge-py@v2       # –∂–∏–≤–æ–π —ç–∫—à–µ–Ω
      with:
        output: coverage.svg

    # 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –±–µ–π–¥–∂
    - name: Verify badge changed
      id: verify
      uses: tj-actions/verify-changed-files@v16
      with:
        files: coverage.svg

    # 10. –ö–æ–º–º–∏—Ç–∏–º –∏ –ø—É—à–∏–º –≤ main, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –æ–±–Ω–æ–≤–∏–ª—Å—è
    - name: Commit and push badge
      if: steps.verify.outputs.files_changed == 'true' && github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name  "github-actions[bot]"
        git add coverage.svg
        git commit -m "chore: update coverage badge"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 11. –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    - name: Extract coverage %
      id: cov
      run: |
        python - <<'PY'
        import xml.etree.ElementTree as ET, math, os
        pct = math.floor(float(ET.parse('coverage.xml').getroot().attrib['line-rate'])*100)
        with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            fh.write(f"pct={pct}\n")
        PY

    # 12. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ PR (sticky ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç, –∞ –Ω–µ –ø–ª–æ–¥–∏—Ç)
    - name: PR comment with coverage
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        message: |
          üß™ **Test coverage:** **${{ steps.cov.outputs.pct }}%**
