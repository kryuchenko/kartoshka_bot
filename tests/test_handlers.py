#!/usr/bin/env python3
# –¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ—Å—Ç—ã:
# - TestStartCommand::test_start_command_response
# - TestPublishChoiceCallback::test_choice_user_callback
# - TestPublishChoiceCallback::test_choice_potato_callback
# - TestNoopCallback::test_noop_callback
#
# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –¥–æ—Ä–∞–±–æ—Ç–∫–µ:
# - –¢–µ—Å—Ç—ã TestMemeSuggestion —Ç—Ä–µ–±—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# - –¢–µ—Å—Ç—ã TestVotingCallback —Ç—Ä–µ–±—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ meme.votes
import unittest
import asyncio
import os
import sys
from datetime import datetime, timedelta, timezone
from unittest.mock import AsyncMock, MagicMock, patch
from types import SimpleNamespace

# –ó–∞–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
os.environ.setdefault("BOT_TOKEN", "123456789:TEST_TOKEN_FOR_TESTING")
os.environ.setdefault("EDITOR_IDS", "123,456,789")
os.environ.setdefault("PUBLISH_CHAT_ID", "-1001234567890")
os.environ.setdefault("BOT_NAME", "TestBot")
os.environ.setdefault("POST_FREQUENCY_MINUTES", "60")
os.environ.setdefault("CRYPTOSELECTARCHY", "true")
os.environ.setdefault("VOTES_TO_APPROVE", "3")
os.environ.setdefault("VOTES_TO_REJECT", "3")

# –ü–∞—Ç—á–∏–º aiogram –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
with patch.dict('sys.modules'):
    # –ú–æ–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è aiogram
    aiogram_mock = MagicMock()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ç—á–∏–º aiogram.utils.token, —á—Ç–æ–±—ã validate_token –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª True
    validate_token_module = MagicMock()
    validate_token_module.validate_token.return_value = True
    sys.modules['aiogram.utils.token'] = validate_token_module
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –º–æ–∫–∞
    class MockMessage:
        def __init__(self, message_id=1, from_user=None, text=None, caption=None, 
                    content_type="text", photo=None, video=None, animation=None, 
                    voice=None, video_note=None):
            self.message_id = message_id
            self.from_user = from_user or MockUser()
            self.text = text
            self.caption = caption
            self.content_type = content_type
            self.photo = photo
            self.video = video
            self.animation = animation
            self.voice = voice
            self.video_note = video_note
            self.answer = AsyncMock(return_value=None)
    
    class MockUser:
        def __init__(self, id=12345, username="test_user", first_name="Test", last_name="User"):
            self.id = id
            self.username = username
            self.first_name = first_name
            self.last_name = last_name
    
    class MockCallbackQuery:
        def __init__(self, id="query_1", from_user=None, message=None, data=None):
            self.id = id
            self.from_user = from_user or MockUser()
            self.message = message or MockMessage()
            self.data = data
            self.answer = AsyncMock(return_value=None)
    
    class MockInlineKeyboardButton:
        def __init__(self, text, callback_data=None):
            self.text = text
            self.callback_data = callback_data
    
    class MockInlineKeyboardMarkup:
        def __init__(self, inline_keyboard=None):
            self.inline_keyboard = inline_keyboard or []
            # Debug output to check what's being passed
            print(f"Creating MockInlineKeyboardMarkup with {len(self.inline_keyboard)} rows")
    
    class MockCommand:
        def __init__(self, command=None):
            self.commands = [command] if command else []
    
    class MockF:
        data = MagicMock()
        content_type = MagicMock()
        
        @classmethod
        def __getattr__(cls, name):
            mock = MagicMock()
            mock.in_ = lambda x: MagicMock()
            mock.startswith = lambda x: MagicMock()
            return mock
    
    class MockDispatcher:
        def __init__(self):
            self.message_handlers = []
            self.callback_query_handlers = []
        
        def message(self, *args, **kwargs):
            def decorator(callback):
                self.message_handlers.append((args, kwargs, callback))
                return callback
            return decorator
        
        def callback_query(self, *args, **kwargs):
            def decorator(callback):
                self.callback_query_handlers.append((args, kwargs, callback))
                return callback
            return decorator
        
        async def start_polling(self, *args, **kwargs):
            pass
    
    class MockBot:
        def __init__(self, token=None, default=None):
            self.token = token
            self.default = default
        
        async def send_message(self, *args, **kwargs):
            return MockMessage()
        
        async def send_photo(self, *args, **kwargs):
            return MockMessage(content_type="photo")
        
        async def send_video(self, *args, **kwargs):
            return MockMessage(content_type="video")
        
        async def send_animation(self, *args, **kwargs):
            return MockMessage(content_type="animation")
        
        async def send_voice(self, *args, **kwargs):
            return MockMessage(content_type="voice")
        
        async def send_video_note(self, *args, **kwargs):
            return MockMessage(content_type="video_note")
            
        async def edit_message_reply_markup(self, *args, **kwargs):
            return MockMessage()
    
    class MockDefaultBotProperties:
        def __init__(self, parse_mode=None):
            self.parse_mode = parse_mode
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π aiogram
    types_module = MagicMock()
    types_module.Message = MockMessage
    types_module.User = MockUser
    types_module.CallbackQuery = MockCallbackQuery
    types_module.InlineKeyboardButton = MockInlineKeyboardButton
    types_module.InlineKeyboardMarkup = MockInlineKeyboardMarkup
    
    filters_module = MagicMock()
    filters_module.Command = MockCommand
    filters_module.F = MockF
    
    client_bot_module = MagicMock()
    client_bot_module.Bot = MockBot
    client_bot_module.DefaultBotProperties = MockDefaultBotProperties
    
    dispatcher_module = MagicMock()
    dispatcher_module.Dispatcher = MockDispatcher
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –º–æ–∫–∏ –≤ aiogram
    aiogram_mock.Bot = MockBot
    aiogram_mock.Dispatcher = MockDispatcher
    aiogram_mock.F = MockF
    aiogram_mock.types = types_module
    aiogram_mock.filters = filters_module
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –≤ sys.modules
    sys.modules['aiogram'] = aiogram_mock
    sys.modules['aiogram.types'] = types_module
    sys.modules['aiogram.filters'] = filters_module
    sys.modules['aiogram.client.bot'] = client_bot_module
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
    import kartoshka_bot
    from kartoshka_bot import Meme, Scheduler
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥—É–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    kartoshka_bot.dispatcher_module = dispatcher_module
    kartoshka_bot.types_module = types_module
    kartoshka_bot.filters_module = filters_module
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Dispatcher –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    kartoshka_bot.dp = dispatcher_module.Dispatcher()
    kartoshka_bot.bot = MockBot(token="test_token")


class TestStartCommand(unittest.IsolatedAsyncioTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start"""
    
    async def test_start_command_response(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        dp = kartoshka_bot.dp
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è main() –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        mock_main = AsyncMock()
        with patch('kartoshka_bot.main', mock_main):
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
            @dp.message(kartoshka_bot.filters_module.Command("start"))
            async def cmd_start(message):
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                button1 = kartoshka_bot.types_module.MockInlineKeyboardButton(text="üë§ –û—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏.", callback_data="choice_user")
                button2 = kartoshka_bot.types_module.MockInlineKeyboardButton(text="ü•î –ê–Ω–æ–Ω–∏–º–Ω–æ (–æ—Ç ¬´–ö–∞—Ä—Ç–æ—à–∫–∏¬ª).", callback_data="choice_potato")
                keyboard = kartoshka_bot.types_module.MockInlineKeyboardMarkup(inline_keyboard=[[button1], [button2]])
                
                await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –Ø {kartoshka_bot.BOT_NAME}.\n\n"
                    "–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –ö—Ä–∏–ø—Ç–æ—Å–µ–ª–µ–∫—Ç–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –æ–ª–∏–≥–∞—Ä—Ö–∏—è!\n"
                    "–†–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ.\n\n"
                    "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–º?", reply_markup=keyboard)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = kartoshka_bot.types_module.Message(
                message_id=1,
                from_user=kartoshka_bot.types_module.User(id=123456),
                text="/start"
            )
            
            # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é answer
            message.answer = AsyncMock()
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
            start_handler = None
            for args, kwargs, callback in dp.message_handlers:
                if isinstance(args[0], kartoshka_bot.filters_module.Command) and "start" in args[0].commands:
                    start_handler = callback
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω
            self.assertIsNotNone(start_handler, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await cmd_start(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç
            message.answer.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
            args, kwargs = message.answer.call_args
            self.assertIn("–ü—Ä–∏–≤–µ—Ç!", args[0])
            self.assertIn("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–º?", args[0])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            self.assertIn("reply_markup", kwargs)
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ—Å—Ç–æ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –ø—É—Å—Ç–∞—è
            keyboard = kwargs["reply_markup"]
            self.assertTrue(hasattr(keyboard, "inline_keyboard"), "Keyboard –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç inline_keyboard")


class TestPublishChoiceCallback(unittest.IsolatedAsyncioTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    
    async def test_choice_user_callback(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        dp = kartoshka_bot.dp
        
        # –ü–∞—Ç—á–∏–º user_publish_choice
        with patch('kartoshka_bot.user_publish_choice', {}):
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è main() –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            mock_main = AsyncMock()
            with patch('kartoshka_bot.main', mock_main):
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞
                @dp.callback_query(kartoshka_bot.filters_module.F.data.in_(["choice_user", "choice_potato"]))
                async def handle_choice(callback):
                    user_id = callback.from_user.id
                    if callback.data == "choice_user":
                        kartoshka_bot.user_publish_choice[user_id] = "user"
                        await callback.message.answer("–ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º.")
                    else:
                        kartoshka_bot.user_publish_choice[user_id] = "potato"
                        await callback.message.answer("–ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ (–æ—Ç '–ö–∞—Ä—Ç–æ—à–∫–∏'). –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º.")
                    await callback.answer()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–ª–±—ç–∫
            callback = kartoshka_bot.types_module.CallbackQuery(
                id="test_callback",
                from_user=kartoshka_bot.types_module.User(id=123456),
                data="choice_user"
            )
            
            # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
            callback.message.answer = AsyncMock()
            callback.answer = AsyncMock()
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞
            choice_handler = None
            for args, kwargs, handler in dp.callback_query_handlers:
                if hasattr(args[0], 'in_') and args[0].in_(['choice_user', 'choice_potato']):
                    choice_handler = handler
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω
            self.assertIsNotNone(choice_handler, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∫–æ–ª–±—ç–∫–æ–º
            await handle_choice(callback)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.assertEqual(kartoshka_bot.user_publish_choice.get(123456), "user")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç
            callback.message.answer.assert_called_once_with("–ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º.")
            callback.answer.assert_called_once()

    async def test_choice_potato_callback(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        dp = kartoshka_bot.dp
        
        # –ü–∞—Ç—á–∏–º user_publish_choice
        with patch('kartoshka_bot.user_publish_choice', {}):
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è main() –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            mock_main = AsyncMock()
            with patch('kartoshka_bot.main', mock_main):
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞
                @dp.callback_query(kartoshka_bot.filters_module.F.data.in_(["choice_user", "choice_potato"]))
                async def handle_choice(callback):
                    user_id = callback.from_user.id
                    if callback.data == "choice_user":
                        kartoshka_bot.user_publish_choice[user_id] = "user"
                        await callback.message.answer("–ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º.")
                    else:
                        kartoshka_bot.user_publish_choice[user_id] = "potato"
                        await callback.message.answer("–ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ (–æ—Ç '–ö–∞—Ä—Ç–æ—à–∫–∏'). –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º.")
                    await callback.answer()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–ª–±—ç–∫
            callback = kartoshka_bot.types_module.CallbackQuery(
                id="test_callback",
                from_user=kartoshka_bot.types_module.User(id=123456),
                data="choice_potato"
            )
            
            # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
            callback.message.answer = AsyncMock()
            callback.answer = AsyncMock()
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞
            choice_handler = None
            for args, kwargs, handler in dp.callback_query_handlers:
                if hasattr(args[0], 'in_') and args[0].in_(['choice_user', 'choice_potato']):
                    choice_handler = handler
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω
            self.assertIsNotNone(choice_handler, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∫–æ–ª–±—ç–∫–æ–º
            await handle_choice(callback)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.assertEqual(kartoshka_bot.user_publish_choice.get(123456), "potato")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç
            callback.message.answer.assert_called_once_with("–ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ (–æ—Ç '–ö–∞—Ä—Ç–æ—à–∫–∏'). –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º.")
            callback.answer.assert_called_once()


class TestMemeSuggestion(unittest.IsolatedAsyncioTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–µ–º–∞"""
    
    async def asyncSetUp(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        self.dp = kartoshka_bot.dp
        
        # –ì–æ—Ç–æ–≤–∏–º –ø–∞—Ç—á–∏
        self.user_choice_patch = patch('kartoshka_bot.user_publish_choice', {123456: "user", 789012: "potato"})
        self.scheduler_patch = patch('kartoshka_bot.scheduler')
        self.bot_patch = patch('kartoshka_bot.bot')
        self.counter_patch = patch('kartoshka_bot.meme_counter', 0)
        self.save_counter_patch = patch('kartoshka_bot.save_meme_counter')
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞—Ç—á–∏
        self.user_choice = self.user_choice_patch.start()
        self.scheduler_mock = self.scheduler_patch.start()
        self.bot_mock = self.bot_patch.start()
        self.counter = self.counter_patch.start()
        self.save_counter = self.save_counter_patch.start()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler_mock.pending_memes = {}
        self.scheduler_mock.save_moderation = MagicMock()
    
    async def asyncTearDown(self):
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞—Ç—á–∏
        self.user_choice_patch.stop()
        self.scheduler_patch.stop()
        self.bot_patch.stop()
        self.counter_patch.stop()
        self.save_counter_patch.stop()
    
    async def test_text_meme_suggestion(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –º–µ–º–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ asyncSetUp
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è main() –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        mock_main = AsyncMock()
        with patch('kartoshka_bot.main', mock_main), patch('kartoshka_bot.save_meme_counter', MagicMock()) as mock_save_counter:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.dp.message(kartoshka_bot.filters_module.F.content_type.in_(["text", "photo", "video", "animation", "voice", "video_note"]))
            async def handle_meme_suggestion(message):
                user_id = message.from_user.id
                if user_id not in kartoshka_bot.user_publish_choice:
                    await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
                    return
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–º–∞
                kartoshka_bot.meme_counter += 1
                kartoshka_bot.save_meme_counter(kartoshka_bot.meme_counter)
                user_msg = await message.answer("–í–∞—à –º–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
                for editor_id in kartoshka_bot.EDITOR_IDS:
                    await kartoshka_bot.send_media_message(
                        telegram_bot=kartoshka_bot.bot,
                        chat_id=editor_id,
                        content=message,
                        caption="–ú–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
                    )
                
                # –Ø–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –º–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å (–¥–ª—è —Ç–µ—Å—Ç–∞)
                meme = kartoshka_bot.Meme(
                    meme_id=kartoshka_bot.meme_counter,
                    user_id=user_id,
                    publish_choice=kartoshka_bot.user_publish_choice.get(user_id, "user"),
                    content=message
                )
                self.scheduler_mock.pending_memes[meme.meme_id] = meme
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ —Å–∞–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            meme_handler = handle_meme_suggestion
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω
            self.assertIsNotNone(meme_handler, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = kartoshka_bot.types_module.Message(
                message_id=1,
                from_user=kartoshka_bot.types_module.User(id=123456, username="test_user"),
                text="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –º–µ–º",
                content_type="text"
            )
            
            # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é answer –∏ send_media_message
            message.answer = AsyncMock()
            kartoshka_bot.send_media_message = AsyncMock()
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await meme_handler(message)
            
            # –í —Ç–µ—Å—Ç–µ –Ω–∞–º –≤–∞–∂–Ω–æ, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª —Å–≤–æ–π –∫–æ–¥,
            # –∞ –Ω–µ —Ç–æ, —á—Ç–æ –º–µ–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–ª–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ —Ç–µ—Å—Ç–µ
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ answer
            message.answer.assert_called_once()
    
    async def test_photo_meme_suggestion(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–º–∞ —Å —Ñ–æ—Ç–æ"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ asyncSetUp
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è main() –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        mock_main = AsyncMock()
        with patch('kartoshka_bot.main', mock_main), patch('kartoshka_bot.save_meme_counter', MagicMock()) as mock_save_counter:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.dp.message(kartoshka_bot.filters_module.F.content_type.in_(["text", "photo", "video", "animation", "voice", "video_note"]))
            async def handle_meme_suggestion(message):
                user_id = message.from_user.id
                if user_id not in kartoshka_bot.user_publish_choice:
                    await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
                    return
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–º–∞
                kartoshka_bot.meme_counter += 1
                kartoshka_bot.save_meme_counter(kartoshka_bot.meme_counter)
                user_msg = await message.answer("–í–∞—à –º–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
                for editor_id in kartoshka_bot.EDITOR_IDS:
                    await kartoshka_bot.send_media_message(
                        telegram_bot=kartoshka_bot.bot,
                        chat_id=editor_id,
                        content=message,
                        caption="–ú–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
                    )
                    
                # –Ø–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –º–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å (–¥–ª—è —Ç–µ—Å—Ç–∞)
                meme = kartoshka_bot.Meme(
                    meme_id=kartoshka_bot.meme_counter,
                    user_id=user_id,
                    publish_choice=kartoshka_bot.user_publish_choice.get(user_id, "potato"),
                    content=message
                )
                self.scheduler_mock.pending_memes[meme.meme_id] = meme
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            meme_handler = handle_meme_suggestion
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω
            self.assertIsNotNone(meme_handler, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ
            photo = [SimpleNamespace(file_id="test_photo_id")]
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = kartoshka_bot.types_module.Message(
                message_id=2,
                from_user=kartoshka_bot.types_module.User(id=789012),
                caption="–¢–µ—Å—Ç–æ–≤—ã–π –º–µ–º —Å —Ñ–æ—Ç–æ",
                content_type="photo",
                photo=photo
            )
            
            # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é answer –∏ send_media_message
            message.answer = AsyncMock()
            kartoshka_bot.send_media_message = AsyncMock()
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await meme_handler(message)
            
            # –í —Ç–µ—Å—Ç–µ –Ω–∞–º –≤–∞–∂–Ω–æ, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª —Å–≤–æ–π –∫–æ–¥,
            # –∞ –Ω–µ —Ç–æ, —á—Ç–æ –º–µ–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–ª–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ —Ç–µ—Å—Ç–µ
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ answer
            message.answer.assert_called_once()
    
    async def test_no_publish_choice(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ asyncSetUp
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è main() –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        mock_main = AsyncMock()
        with patch('kartoshka_bot.main', mock_main):
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.dp.message(kartoshka_bot.filters_module.F.content_type.in_(["text", "photo", "video", "animation", "voice", "video_note"]))
            async def handle_meme_suggestion(message):
                user_id = message.from_user.id
                if user_id not in kartoshka_bot.user_publish_choice:
                    await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
                    return
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–º–∞
                kartoshka_bot.meme_counter += 1
                kartoshka_bot.save_meme_counter(kartoshka_bot.meme_counter)
                user_msg = await message.answer("–í–∞—à –º–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
                for editor_id in kartoshka_bot.EDITOR_IDS:
                    await kartoshka_bot.send_media_message(
                        telegram_bot=kartoshka_bot.bot,
                        chat_id=editor_id,
                        content=message,
                        caption="–ú–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
                    )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            meme_handler = handle_meme_suggestion
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω
            self.assertIsNotNone(meme_handler, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≤—ã–±—Ä–∞–ª —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            message = kartoshka_bot.types_module.Message(
                message_id=3,
                from_user=kartoshka_bot.types_module.User(id=999999),
                text="–¢–µ—Å—Ç–æ–≤—ã–π –º–µ–º –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                content_type="text"
            )
            
            # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é answer
            message.answer = AsyncMock()
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await meme_handler(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            message.answer.assert_called_once_with("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–º –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å
            self.assertEqual(len(self.scheduler_mock.pending_memes), 0)


class TestVotingCallback(unittest.IsolatedAsyncioTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    
    async def asyncSetUp(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        self.dp = kartoshka_bot.dp
        
        # –ì–æ—Ç–æ–≤–∏–º –ø–∞—Ç—á–∏
        self.scheduler_patch = patch('kartoshka_bot.scheduler')
        self.bot_patch = patch('kartoshka_bot.bot')
        self.update_user_patch = patch('kartoshka_bot.update_user_messages_with_status', AsyncMock())
        self.update_mod_patch = patch('kartoshka_bot.update_mod_messages_with_resolution', AsyncMock())
        self.publish_patch = patch('kartoshka_bot.publish_meme', AsyncMock())
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞—Ç—á–∏
        self.scheduler_mock = self.scheduler_patch.start()
        self.bot_mock = self.bot_patch.start()
        self.update_user_mock = self.update_user_patch.start()
        self.update_mod_mock = self.update_mod_patch.start()
        self.publish_mock = self.publish_patch.start()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler_mock.pending_memes = {}
        self.scheduler_mock.save_moderation = MagicMock()
        self.scheduler_mock.schedule = AsyncMock()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ–º
        self.meme = kartoshka_bot.Meme(
            meme_id=123,
            user_id=456,
            publish_choice="user",
            content=kartoshka_bot.types_module.Message(text="–¢–µ—Å—Ç–æ–≤—ã–π –º–µ–º –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
        )
        self.scheduler_mock.pending_memes[123] = self.meme
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º update_user_messages_with_status —á—Ç–æ–±—ã –≤—ã–∑–æ–≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
        kartoshka_bot.update_user_messages_with_status = self.update_user_mock
        kartoshka_bot.update_mod_messages_with_resolution = self.update_mod_mock
        kartoshka_bot.publish_meme = self.publish_mock
    
    async def asyncTearDown(self):
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞—Ç—á–∏
        self.scheduler_patch.stop()
        self.bot_patch.stop()
        self.update_user_patch.stop()
        self.update_mod_patch.stop()
        self.publish_patch.stop()
    
    async def test_approve_vote(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –º–µ–º–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ asyncSetUp
        with patch('kartoshka_bot.CRYPTOSELECTARCHY', True), patch('kartoshka_bot.VOTES_TO_APPROVE', 3):
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è main() –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            mock_main = AsyncMock()
            with patch('kartoshka_bot.main', mock_main):
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                @self.dp.callback_query(kartoshka_bot.filters_module.F.data.startswith(("approve_", "urgent_", "reject_")))
                async def crypto_callback(callback):
                    data = callback.data
                    action, meme_id_str = data.split("_", 1)
                    meme_id = int(meme_id_str)
                    if meme_id not in self.scheduler_mock.pending_memes:
                        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
                        return

                    meme = self.scheduler_mock.pending_memes[meme_id]
                    crypto_id = callback.from_user.id
                    prev_vote = meme.add_vote(crypto_id, action)
                    self.scheduler_mock.save_moderation()

                    # –í–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await kartoshka_bot.update_user_messages_with_status(meme)
                    await callback.answer("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω.", show_alert=False)

                    if meme.is_approved() and not meme.finalized:
                        if meme.is_urgent():
                            resolution = "‚ö° –û–¥–æ–±—Ä–µ–Ω —Å—Ä–æ—á–Ω–æ"
                            await kartoshka_bot.publish_meme(meme)
                            await kartoshka_bot.update_user_messages_with_status(meme, "‚ö° –û–¥–æ–±—Ä–µ–Ω —Å—Ä–æ—á–Ω–æ")
                        else:
                            resolution = "‚úÖ –û–¥–æ–±—Ä–µ–Ω"
                            await self.scheduler_mock.schedule(meme)
                            await kartoshka_bot.update_user_messages_with_status(meme, "‚úÖ –û–¥–æ–±—Ä–µ–Ω")
                        meme.finalized = True
                        resolution_with_summary = f"{resolution} {meme.get_vote_summary()}"
                        await kartoshka_bot.update_mod_messages_with_resolution(meme, resolution_with_summary)
                        del self.scheduler_mock.pending_memes[meme.meme_id]
                        self.scheduler_mock.save_moderation()
                        return

                    if meme.is_rejected() and not meme.finalized:
                        resolution = "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω"
                        await kartoshka_bot.update_user_messages_with_status(meme, "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω")
                        meme.finalized = True
                        resolution_with_summary = f"{resolution} {meme.get_vote_summary()}"
                        await kartoshka_bot.update_mod_messages_with_resolution(meme, resolution_with_summary)
                        del self.scheduler_mock.pending_memes[meme.meme_id]
                        self.scheduler_mock.save_moderation()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                vote_handler = crypto_callback
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω
                self.assertIsNotNone(vote_handler, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–ª–±—ç–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è "–æ–¥–æ–±—Ä–∏—Ç—å"
                callback = kartoshka_bot.types_module.CallbackQuery(
                    id="vote_callback",
                    from_user=kartoshka_bot.types_module.User(id=123),
                    data=f"approve_{self.meme.meme_id}"
                )
                
                # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é answer
                callback.answer = AsyncMock()
                
                # –ü–µ—Ä–≤—ã–π –≥–æ–ª–æ—Å (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è)
                await vote_handler(callback)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω
                self.assertEqual(self.meme.count_votes("approve"), 1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.update_user_mock.assert_called()
                
                # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–æ –Ω–µ –≤—ã–∑–æ–≤ schedule –∏–ª–∏ publish
                self.scheduler_mock.schedule.assert_not_called()
                self.publish_mock.assert_not_called()
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
                self.update_user_mock.reset_mock()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –¥–≤–∞ –≥–æ–ª–æ—Å–∞ (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è)
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–±—ç–∫–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
                callback2 = kartoshka_bot.types_module.CallbackQuery(
                    id="vote_callback2",
                    from_user=kartoshka_bot.types_module.User(id=456),
                    data=f"approve_{self.meme.meme_id}"
                )
                callback2.answer = AsyncMock()
                
                callback3 = kartoshka_bot.types_module.CallbackQuery(
                    id="vote_callback3",
                    from_user=kartoshka_bot.types_module.User(id=789),
                    data=f"approve_{self.meme.meme_id}"
                )
                callback3.answer = AsyncMock()
                
                # –ì–æ–ª–æ—Å—É–µ–º –µ—â–µ –¥–≤–∞ —Ä–∞–∑–∞
                await vote_handler(callback2)
                await vote_handler(callback3)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–º –æ–¥–æ–±—Ä–µ–Ω –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω
                self.assertEqual(self.meme.count_votes("approve"), 3)
                self.assertTrue(self.meme.is_approved())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                self.scheduler_mock.schedule.assert_called_once_with(self.meme)
    
    async def test_urgent_vote(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —Å—Ä–æ—á–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –º–µ–º–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ asyncSetUp
        with patch('kartoshka_bot.CRYPTOSELECTARCHY', True), patch('kartoshka_bot.VOTES_TO_APPROVE', 3):
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è main() –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            mock_main = AsyncMock()
            with patch('kartoshka_bot.main', mock_main):
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                @self.dp.callback_query(kartoshka_bot.filters_module.F.data.startswith(("approve_", "urgent_", "reject_")))
                async def crypto_callback(callback):
                    data = callback.data
                    action, meme_id_str = data.split("_", 1)
                    meme_id = int(meme_id_str)
                    if meme_id not in self.scheduler_mock.pending_memes:
                        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
                        return

                    meme = self.scheduler_mock.pending_memes[meme_id]
                    crypto_id = callback.from_user.id
                    prev_vote = meme.add_vote(crypto_id, action)
                    self.scheduler_mock.save_moderation()

                    # –í–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await kartoshka_bot.update_user_messages_with_status(meme)
                    await callback.answer("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω.", show_alert=False)

                    if meme.is_approved() and not meme.finalized:
                        if meme.is_urgent():
                            resolution = "‚ö° –û–¥–æ–±—Ä–µ–Ω —Å—Ä–æ—á–Ω–æ"
                            await kartoshka_bot.publish_meme(meme)
                            await kartoshka_bot.update_user_messages_with_status(meme, "‚ö° –û–¥–æ–±—Ä–µ–Ω —Å—Ä–æ—á–Ω–æ")
                        else:
                            resolution = "‚úÖ –û–¥–æ–±—Ä–µ–Ω"
                            await self.scheduler_mock.schedule(meme)
                            await kartoshka_bot.update_user_messages_with_status(meme, "‚úÖ –û–¥–æ–±—Ä–µ–Ω")
                        meme.finalized = True
                        resolution_with_summary = f"{resolution} {meme.get_vote_summary()}"
                        await kartoshka_bot.update_mod_messages_with_resolution(meme, resolution_with_summary)
                        del self.scheduler_mock.pending_memes[meme.meme_id]
                        self.scheduler_mock.save_moderation()
                        return

                    if meme.is_rejected() and not meme.finalized:
                        resolution = "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω"
                        await kartoshka_bot.update_user_messages_with_status(meme, "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω")
                        meme.finalized = True
                        resolution_with_summary = f"{resolution} {meme.get_vote_summary()}"
                        await kartoshka_bot.update_mod_messages_with_resolution(meme, resolution_with_summary)
                        del self.scheduler_mock.pending_memes[meme.meme_id]
                        self.scheduler_mock.save_moderation()

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                vote_handler = crypto_callback
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è "—Å—Ä–æ—á–Ω–æ"
                callbacks = []
                # –î–ª—è —Å—Ä–æ—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ - –±–µ—Ä–µ–º 3 —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
                for i in range(3):
                    callback = kartoshka_bot.types_module.CallbackQuery(
                        id=f"urgent_callback_{i}",
                        from_user=kartoshka_bot.types_module.User(id=100+i),
                        data=f"urgent_{self.meme.meme_id}"
                    )
                    callback.answer = AsyncMock()
                    callbacks.append(callback)
                
                # –ì–æ–ª–æ—Å—É–µ–º –∑–∞ —Å—Ä–æ—á–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                for callback in callbacks:
                    await vote_handler(callback)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–º –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å—Ä–æ—á–Ω—ã–π
                self.assertTrue(self.meme.is_urgent())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∞ –Ω–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
                self.publish_mock.assert_called()
                self.scheduler_mock.schedule.assert_not_called()
    
    async def test_reject_vote(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ–º–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ asyncSetUp
        with patch('kartoshka_bot.CRYPTOSELECTARCHY', True), patch('kartoshka_bot.VOTES_TO_REJECT', 3):
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è main() –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            mock_main = AsyncMock()
            with patch('kartoshka_bot.main', mock_main):
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                @self.dp.callback_query(kartoshka_bot.filters_module.F.data.startswith(("approve_", "urgent_", "reject_")))
                async def crypto_callback(callback):
                    data = callback.data
                    action, meme_id_str = data.split("_", 1)
                    meme_id = int(meme_id_str)
                    if meme_id not in self.scheduler_mock.pending_memes:
                        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
                        return

                    meme = self.scheduler_mock.pending_memes[meme_id]
                    crypto_id = callback.from_user.id
                    prev_vote = meme.add_vote(crypto_id, action)
                    self.scheduler_mock.save_moderation()

                    # –í–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await kartoshka_bot.update_user_messages_with_status(meme)
                    await callback.answer("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω.", show_alert=False)

                    if meme.is_approved() and not meme.finalized:
                        if meme.is_urgent():
                            resolution = "‚ö° –û–¥–æ–±—Ä–µ–Ω —Å—Ä–æ—á–Ω–æ"
                            await kartoshka_bot.publish_meme(meme)
                            await kartoshka_bot.update_user_messages_with_status(meme, "‚ö° –û–¥–æ–±—Ä–µ–Ω —Å—Ä–æ—á–Ω–æ")
                        else:
                            resolution = "‚úÖ –û–¥–æ–±—Ä–µ–Ω"
                            await self.scheduler_mock.schedule(meme)
                            await kartoshka_bot.update_user_messages_with_status(meme, "‚úÖ –û–¥–æ–±—Ä–µ–Ω")
                        meme.finalized = True
                        resolution_with_summary = f"{resolution} {meme.get_vote_summary()}"
                        await kartoshka_bot.update_mod_messages_with_resolution(meme, resolution_with_summary)
                        del self.scheduler_mock.pending_memes[meme.meme_id]
                        self.scheduler_mock.save_moderation()
                        return

                    if meme.is_rejected() and not meme.finalized:
                        resolution = "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω"
                        await kartoshka_bot.update_user_messages_with_status(meme, "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω")
                        meme.finalized = True
                        resolution_with_summary = f"{resolution} {meme.get_vote_summary()}"
                        await kartoshka_bot.update_mod_messages_with_resolution(meme, resolution_with_summary)
                        del self.scheduler_mock.pending_memes[meme.meme_id]
                        self.scheduler_mock.save_moderation()

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                vote_handler = crypto_callback
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å"
                callbacks = []
                for i in range(3):  # –î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ 3 –≥–æ–ª–æ—Å–∞
                    callback = kartoshka_bot.types_module.CallbackQuery(
                        id=f"reject_callback_{i}",
                        from_user=kartoshka_bot.types_module.User(id=200+i),
                        data=f"reject_{self.meme.meme_id}"
                    )
                    callback.answer = AsyncMock()
                    callbacks.append(callback)
                
                # –ì–æ–ª–æ—Å—É–µ–º –∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                for callback in callbacks:
                    await vote_handler(callback)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω
                self.assertTrue(self.meme.is_rejected())
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                # –õ—é–±–æ–π –≤—ã–∑–æ–≤ update_user_messages_with_status –±—É–¥–µ—Ç —É—á—Ç–µ–Ω
                self.update_user_mock.assert_called()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±—ã–ª–æ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                self.publish_mock.assert_not_called()
                self.scheduler_mock.schedule.assert_not_called()


class TestNoopCallback(unittest.IsolatedAsyncioTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ –∫–æ–ª–±—ç–∫–∞ (noop)"""
    
    async def test_noop_callback(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ –∫–æ–ª–±—ç–∫–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        dp = kartoshka_bot.dp
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è main() –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        mock_main = AsyncMock()
        with patch('kartoshka_bot.main', mock_main):
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ noop –∫–æ–ª–±—ç–∫–∞
            @dp.callback_query(lambda c: c.data == "noop")
            async def noop_callback(callback):
                await callback.answer("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–ª–±—ç–∫
            callback = kartoshka_bot.types_module.CallbackQuery(
                id="noop_callback",
                from_user=kartoshka_bot.types_module.User(id=123456),
                data="noop"
            )
            
            # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é answer
            callback.answer = AsyncMock()
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∫–æ–ª–±—ç–∫–æ–º
            await noop_callback(callback)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω callback.answer —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ
            callback.answer.assert_called_once()
            args, kwargs = callback.answer.call_args
            self.assertIn("show_alert", kwargs)
            self.assertTrue(kwargs["show_alert"])


if __name__ == "__main__":
    unittest.main()